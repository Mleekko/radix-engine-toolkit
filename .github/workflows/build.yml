name: Build
on:
  push:
    branches:
      - fix/*
      - feature/*
      - release/*
      - develop
      - main
      - linux-builds-fix
jobs:
  build:
    runs-on: ${{ matrix.build-target.runner }}
    continue-on-error: false
    strategy:
      matrix:
        build-target:
          # =============
          # JSON Toolkit
          # =============

          # WASM Targets
          - crate: radix-engine-toolkit
            target-triple: wasm32-unknown-unknown
            runner: ubuntu-latest

          # ===============
          # UniFFI Toolkit
          # ===============

          # Linux Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-unknown-linux-gnu
            runner: ubuntu-20.04
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-unknown-linux-gnu
            runner: ubuntu-latest

          # PC Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-pc-windows-gnu
            runner: ubuntu-latest

          # Android Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-linux-android
            runner: ubuntu-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: armv7-linux-androideabi
            runner: ubuntu-latest

          # MacOS Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-apple-darwin
            runner: macos-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-apple-darwin
            runner: macos-latest

          # iOS Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-apple-ios
            runner: macos-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-apple-ios
            runner: macos-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-apple-ios-sim
            runner: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust Target
        run: |
          # Install Nightly 
          rustup toolchain install nightly

          # Update both toolchains
          rustup update stable
          rustup update nightly

          # Add target
          rustup target install ${{ matrix.build-target.target-triple }}
          rustup +nightly target install ${{ matrix.build-target.target-triple }}

          # Install the nightly toolchain of the target of this machine.
          DEFAULT_TARGET=$(rustc -vV | sed -n 's|host: ||p')
          rustup component add rust-src --toolchain nightly-$DEFAULT_TARGET
      # - name: Cache Dependencies
      #   uses: mozilla-actions/sccache-action@v0.0.3
      # Installing Build Dependencies
      - name: Build Dependencies (aarch64 linux)
        if: ${{ matrix.build-target.target-triple == 'aarch64-unknown-linux-gnu' }}
        run: | 
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
      - name: Build Dependencies (android)
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: ${{ matrix.build-target.target-triple == 'aarch64-linux-android' || matrix.build-target.target-triple == 'armv7-linux-androideabi' }}
        with:
          ndk-version: r25b
      - name: Build Dependencies (aarch64 android)
        if: ${{ matrix.build-target.target-triple == 'aarch64-linux-android' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: | 
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
      - name: Build Dependencies (armv7 android)
        if: ${{ matrix.build-target.target-triple == 'armv7-linux-androideabi' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: | 
          echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi19-clang" >> $GITHUB_ENV
          echo "CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi19-clang" >> $GITHUB_ENV
          echo "AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
      - name: Build Dependencies (aarch64/x86_64 windows)
        if: ${{ matrix.build-target.target-triple == 'x86_64-pc-windows-gnu' }}
        run: | 
          sudo apt-get install -y mingw-w64
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "AR=x86_64-w64-mingw32-gcc-ar" >> $GITHUB_ENV
      - name: Build
        working-directory: ${{ matrix.build-target.crate }}
        # env:
        #   SCCACHE_GHA_ENABLED: "true"
        #   RUSTC_WRAPPER: "sccache"
        run: |
          target_triple="${{ matrix.build-target.target-triple }}"
          if [[ $target_triple =~ "ios" ]]; then
            export IPHONEOS_DEPLOYMENT_TARGET="11.0"
          fi
          echo $IPHONEOS_DEPLOYMENT_TARGET

          cargo build \
            --target ${{ matrix.build-target.target-triple }} \
            --release
      - name: Clean Build Artifacts
        run: find "./${{ matrix.build-target.crate }}/target/${{ matrix.build-target.target-triple }}/release" -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build-target.crate }}-${{ matrix.build-target.target-triple }}
          path: "./${{ matrix.build-target.crate }}/target/${{ matrix.build-target.target-triple }}/release"
  generate-uniffi-bindings:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Clone uniffi-bindgen-cs
        uses: actions/checkout@v3
        with:
          repository: radixdlt/uniffi-bindgen-cs
          path: uniffi-bindgen-cs
          submodules: 'recursive'
          ref: f1a6ef67449b47028fd5c3d8e5c6d3b80ddefd2b
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Generate the Bindings
        run: |
          # Generating the path of the dynamic library
          DYNAMIC_LIBRARY_PATH="./artifacts/radix-engine-toolkit-uniffi-x86_64-unknown-linux-gnu/libradix_engine_toolkit_uniffi.so"
          OUTPUT_DIRECTORY="./uniffi-bindings"

          for LANGUAGE in "java" 
          do
            cargo run \
              --manifest-path="./uniffi-bindgen/Cargo.toml" -- \
              generate ./radix-engine-toolkit-uniffi/src/radix_engine_toolkit_uniffi.udl \
              --language $LANGUAGE \
              --out-dir $OUTPUT_DIRECTORY \
              --lib-file $DYNAMIC_LIBRARY_PATH
          done

          cargo run \
            --manifest-path="./uniffi-bindgen-cs/bindgen/Cargo.toml" -- \
            ./radix-engine-toolkit-uniffi/src/radix_engine_toolkit_uniffi.udl \
            --out-dir $OUTPUT_DIRECTORY \
            --lib-file $DYNAMIC_LIBRARY_PATH
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: uniffi-bindings
          path: uniffi-bindings
  build-test-kit:
    needs: [build]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Test Kit
        run: cargo run
        working-directory: generator
      - name: Upload Generated Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "test-kit"
          path: "./generator/output"
  publish-java-maven:
    needs: [build, generate-uniffi-bindings]
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create Java Library
        working-directory: interop/java
        run:
          ./bootstrap.sh
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.0.2
          arguments: wrapper -p interop/java/ret-java
      - name: Build and publish Java
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build publish
          build-root-directory: interop/java/ret-java
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
